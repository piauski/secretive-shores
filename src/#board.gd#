extends Node2D

@export var island_tiles: Array
@export var island_scene: PackedScene = preload("res://island.tscn")

signal board_ready
signal board_not_ready
var is_board_ready = false

const island_shape: Array = [
	[0, 0, 1, 1, 0, 0],
	[0, 1, 1, 1, 1, 0],
	[1, 1, 1, 1, 1, 1],
	[1, 1, 1, 1, 1, 1],
	[0, 1, 1, 1, 1, 0],
	[0, 0, 1, 1, 0, 0],
]

const spawn_types = {
	Classes.Class.DIVER: Tiles.Tile.SPAWN_DIVER,
	Classes.Class.DIVER: Tiles.Tile.SPAWN_DIVER,
	Classes.Class.DIVER: Tiles.Tile.SPAWN_DIVER,
	Classes.Class.DIVER: Tiles.Tile.SPAWN_DIVER,
	Classes.Class.DIVER: Tiles.Tile.SPAWN_DIVER,
}

func count_island_tiles() -> int:
	var count = 0
	for row in island_shape:
		for cell in row:
			if cell == 1:
				count += 1
	return count


func _ready() -> void:
	# Generate random tiles, fill empties with GENERIC.  This ensures
	# every tile in Tiles.tile_types is present at least once, with
	# every other tile being GENERIC.
	var random_tile_types = Tiles.tile_types.duplicate()
	random_tile_types.resize(count_island_tiles())
	for i in range(random_tile_types.size()):
			if random_tile_types[i] == null:
				random_tile_types[i] = island_of_type(Tiles.Tile.GENERIC)
	random_tile_types.shuffle()

	# Turn island shape into array of tiles
	island_tiles = []
	for row in island_shape:
		var new_row = []
		for cell in row:
			if cell == 1:
				new_row.append(random_tile_types.pop_front())
			else:
				new_row.append(Tiles.Tile.NONE)
		island_tiles.append(new_row)

	# Generate random tile names for generic tiles
	var tile_names: Dictionary
	for tile_type in Tiles.tile_data.keys():
		tile_names[tile_type] = Tiles.tile_data[tile_type].names.duplicate()
		tile_names[tile_type].shuffle()

	# Spawn Island Tiles
	for row_index in range(island_tiles.size()):
		for cell_index in range(island_tiles[row_index].size()):
			var cell = island_tiles[row_index][cell_index]
			if cell != 0:
				var island_instance = island_scene.instantiate()
				island_instance.position = Vector2(cell_index * 200, row_index * 200)
				island_instance.island_type = cell
				# FIXME: this assumes every cell apart from GENERIC has the same name.
				var island_name = tile_names[cell].pop_front() if cell == Tiles.Tile.GENERIC else tile_names[cell][0]
				island_instance.set_name(island_name)
				island_instance.island_name = island_name
				add_child(island_instance)
				island_instance.flooded = false
				print("spawned island ", island_instance.name)

	is_board_ready = true

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	pass


func _on_game_ready() -> void:
	if is_board_ready:
		board_ready.emit()
	else:
		board_not_ready.emit()
		
func get_spawn_for_class(clazz: Classes.Class):
	var spawn_type = spawn_types[clazz]
	return get_children().filter(func(island): return island.island_type == spawn_type)
	
